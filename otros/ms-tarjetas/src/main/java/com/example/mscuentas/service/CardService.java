package com.example.mscuentas.service;

import com.example.mscuentas.dto.ApiException;
import com.example.mscuentas.dto.GetCardDto;
import com.example.mscuentas.enums.AccountProduct;
import com.example.mscuentas.event.producer.DomainEventPublisher;
import com.example.mscuentas.model.Card;
import com.example.mscuentas.repository.CardRepository;
import com.example.mscuentas.repository.CardStatusModelRepository;
import com.example.mspersonas.event.catalog.CardActivatedEvent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Service
@Slf4j
public class CardService {

    private final DomainEventPublisher domainEventPublisher;
    private final CardRepository cardRepository;
    private final CardStatusModelRepository cardStatusModelRepository;
    private static final List<AccountProduct> AVAILABLE_PRODUCTS = List.of(AccountProduct.CREDIT_CARD_BASIC,
            AccountProduct.CREDIT_CARD_GOLD, AccountProduct.CREDIT_CARD_PLATINUM);
    public CardService(final DomainEventPublisher domainEventPublisher,
                       final CardRepository cardRepository,
                       final CardStatusModelRepository cardStatusModelRepository) {
        this.domainEventPublisher = domainEventPublisher;
        this.cardRepository = cardRepository;
        this.cardStatusModelRepository = cardStatusModelRepository;
    }


    public GetCardDto getCard(String id) {
        var card = cardRepository.findById(id).orElseThrow(ApiException::new);
        return new GetCardDto(card.getNumber());
    }

    public void addProducts(final List<AccountProduct> receivedProducts,  final Integer accountNumber) {
        receivedProducts.stream().filter(AVAILABLE_PRODUCTS::contains).forEach(p-> activate(p,accountNumber));
    }

    public void activate(final AccountProduct product, final Integer accountNumber) {
        Card savedCard = null;
        try {
            var status = cardStatusModelRepository.findById(1).orElseThrow(
                    () -> new IllegalArgumentException("Card status model not found"));
            //Let's pretend we used a secure certified generator. We do not involve ourselves with BINS, BANL NUMBERS, etc
            var newCardNumber = String.valueOf(UUID.randomUUID().getLeastSignificantBits());
            //Same. Normally, the pin follows some security standards
            var pin = Long.hashCode(UUID.randomUUID().getLeastSignificantBits()) % 100000;
            //Both of these values would be generated by a dedicated service.
            var newProduct = new Card(
                    newCardNumber, accountNumber, LocalDateTime.now().plusYears(2).toString().substring(0,10),
                    pin, status, LocalDateTime.now().toString().substring(0,10), String.valueOf(product.ordinal()));
            savedCard = cardRepository.save(newProduct);
        }
        catch (Exception e) {
            log.error("Error creating new card [accountNumber = {}]",accountNumber,e);
            throw e;
        }
        try {
            //saved card won't be null, since int that case an exception is thrown before.
            domainEventPublisher.publish(generateEvent(savedCard));
        } catch (Exception e) {
            //Make sure we don't lose the event!
            log.error("Error publishing event [accountNumber = {}]",accountNumber,e);
            throw new ApiException("Error publishing event");
        }
    }

    private CardActivatedEvent generateEvent(final Card savedCard){
        var newEvent = CardActivatedEvent.builder()
                .accountNumber(savedCard.getAccountNumber())
                .number(savedCard.getNumber())
                .type(savedCard.getType())
                .pin(savedCard.getPin())
                .issueDate(savedCard.getIssueDate())
                .expiryDate(savedCard.getExpiryDate())
                .build();
        newEvent.setEventName("card.create");
        return newEvent;
    }
}
